`timescale 1us / 1us
module ZZZ_TB_4_TEST();

reg clk_sampling,clk_operation,rst;
reg [63:0]dataa;
reg [63:0]datab;
wire [63:0]result;
reg add_sub;

initial begin
clk_sampling = 0;
clk_operation = 0;
end
always #200 clk_sampling = ~clk_sampling;
always #1 clk_operation = ~clk_operation;

ALTFP_ADD_SUa MUT (
	.aclr(rst),
	.add_sub(add_sub),
	.clock(clk_operation),
	.dataa(dataa),
	.datab(datab),
		.result(result)
);

initial
begin 
	#0;
	rst = 1'b1;
	#40;
	rst = 1'b0;
	dataa = 64'b0000000000000000000000000000000011001101000101110000011010100010;
	datab = 64'b0000000111000101011011100001111111000010111110001111001101011001;
	add_sub = 0;
end

/*always @(posedge clk_sampling) begin
if (ready) begin
	opa <= $urandom;
	opb <= out;
	fpu_op <= $urandom;
	rmode = 2'b00;
	enable <= 1'b1;
	#4;
	enable <= 1'b0;
end
end*/
endmodule //ZZZ_TB_4_TEST

module TEST();
reg [3:0] k,b;
reg clk;

initial clk =0;
always #125 clk <= ~clk;

always @(posedge clk) begin
k <= $urandom;
b <= k;
end
endmodule//TEST
